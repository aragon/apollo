{"version":3,"file":"DeleteItemAction.js","sourceRoot":"","sources":["../../../src/whitelist/DeleteItemAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,kDAAgD;AAEhD,uFAAuG;AAEvG;IAA8C,oCAAgC;IAA9E;;IAgCA,CAAC;IApBc,0CAAe,GAAzB,UAA0B,OAAuB;QAC9C,IAAI,CAAC,mBAAS,CAAE,OAAO,CAAC,IAAwB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACjE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;SAChD;QAED,OAAO,OAAO,CAAC;IACnB,CAAC;IAWM,kCAAO,GAAd;QACI,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAE,IAAI,CAAC,OAAO,CAAC,IAAwB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAA;IAC9F,CAAC;IACL,uBAAC;AAAD,CAAC,AAhCD,CAA8C,iCAAuB,GAgCpE","sourcesContent":["import {isAddress} from '@ethersproject/address'\nimport { FastifyRequest } from 'fastify';\nimport AbstractWhitelistAction, { WhitelistParams } from \"../../lib/whitelist/AbstractWhitelistAction\";\n\nexport default class DeleteItemAction extends AbstractWhitelistAction<boolean> {\n    /**\n      * Validates the given request body.\n      * \n      * @method validateRequest \n      * \n      * @param {FastifyRequest} request \n      * \n      * @returns {FastifyRequest}\n      * \n      * @protected\n      */\n     protected validateRequest(request: FastifyRequest): FastifyRequest {\n        if (!isAddress((request.body as WhitelistParams).message.publicKey)) {\n            throw new Error('Invalid public key passed!')\n        }\n\n        return request;\n    }\n\n    /**\n     * Adds a new item to the whitelist\n     * \n     * @method execute\n     * \n     * @returns {Promise<boolean>}\n     * \n     * @public\n     */\n    public execute(): Promise<boolean> {\n        return this.whitelist.deleteItem((this.request.body as WhitelistParams).message.publicKey)\n    }\n}\n"]}