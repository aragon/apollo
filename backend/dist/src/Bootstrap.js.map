{"version":3,"file":"Bootstrap.js","sourceRoot":"","sources":["../../src/Bootstrap.ts"],"names":[],"mappings":";;AAAA,mCAAiF;AAIjF,gDAA2C;AAC3C,0CAAqC;AAErC,0CAAqC;AACrC,4CAAqD;AACrD,oCAA+B;AAC/B,sDAAiD;AAEjD,gFAA2E;AAC3E,sFAAiF;AACjF,mFAA8E;AAC9E,6EAAwE;AAExE,2DAAsD;AACtD,iEAA4D;AAC5D,2DAAsD;AACtD,+EAA0E;AAC1E,oFAA+E;AAE/E;IAyCE,mBAAoB,MAAqB;QAArB,WAAM,GAAN,MAAM,CAAe;QACvC,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC3B,CAAC;IAWM,uBAAG,GAAV;QACE,IAAI,CAAC,MAAM,CAAC,MAAM,CAChB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EACvB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EACvB,UAAC,KAAY,EAAE,OAAe;YAC5B,IAAI,KAAK,EAAE;gBACT,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACrB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACjB;YAED,OAAO,CAAC,GAAG,CAAC,4BAA0B,OAAS,CAAC,CAAC;QACnD,CAAC,CACF,CAAC;IACJ,CAAC;IAWO,qCAAiB,GAAzB;QACE,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,SAAS,EACT,UAAC,OAAuB,EAAE,KAAmB;YAC3C,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;YAC9B,KAAK;iBACJ,IAAI,CAAC,GAAG,CAAC;iBACT,MAAM,CAAC,cAAc,EAAE,iCAAiC,CAAC;iBACzD,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAA;QAC3B,CAAC,CACF,CAAC;IACJ,CAAC;IAWO,6CAAyB,GAAjC;QAAA,iBAoDC;QAnDC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,UAAU,EACV,EAAE,MAAM,EAAE,6BAAmB,CAAC,MAAM,EAAE,EACtC,UAAC,OAAuB;YACtB,OAAO,IAAI,4BAAkB,CAC3B,KAAI,CAAC,MAAM,CAAC,QAAQ,EACpB,KAAI,CAAC,QAAQ,EACb,KAAI,CAAC,SAAS,EACd,OAAO,CACR,CAAC,OAAO,EAAE,CAAC;QACd,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,WAAW,EACX,EAAE,MAAM,EAAE,6BAAmB,CAAC,MAAM,EAAE,EACtC,UAAC,OAAuB;YACtB,OAAO,IAAI,6BAAmB,CAC5B,KAAI,CAAC,MAAM,CAAC,QAAQ,EACpB,KAAI,CAAC,QAAQ,EACb,KAAI,CAAC,SAAS,EACd,OAAO,CACR,CAAC,OAAO,EAAE,CAAC;QACd,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,YAAY,EACZ,EAAE,MAAM,EAAE,6BAAmB,CAAC,MAAM,EAAE,EACtC,UAAC,OAAuB;YACtB,OAAO,IAAI,8BAAoB,CAC7B,KAAI,CAAC,MAAM,CAAC,QAAQ,EACpB,KAAI,CAAC,QAAQ,EACb,KAAI,CAAC,SAAS,EACd,OAAO,CACR,CAAC,OAAO,EAAE,CAAC;QACd,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,SAAS,EACT,EAAE,MAAM,EAAE,6BAAmB,CAAC,MAAM,EAAE,EACtC,UAAC,OAAuB;YACtB,OAAO,IAAI,2BAAiB,CAC1B,KAAI,CAAC,MAAM,CAAC,QAAQ,EACpB,KAAI,CAAC,QAAQ,EACb,KAAI,CAAC,SAAS,EACd,OAAO,CACR,CAAC,OAAO,EAAE,CAAC;QACd,CAAC,CACF,CAAC;IACJ,CAAC;IAWO,2CAAuB,GAA/B;QAAA,iBAwBC;QAvBC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,YAAY,EACZ,EAAE,MAAM,EAAE,iCAAuB,CAAC,MAAM,EAAE,EAC1C,UAAC,OAAuB;YACtB,OAAO,IAAI,uBAAa,CAAC,KAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;QAC9D,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,MAAM,CAChB,YAAY,EACZ,EAAE,MAAM,EAAE,iCAAuB,CAAC,MAAM,EAAE,EAC1C,UAAC,OAAuB;YACtB,OAAO,IAAI,0BAAgB,CAAC,KAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;QACjE,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,YAAY,EACZ,EAAE,MAAM,EAAE,iCAAuB,CAAC,MAAM,EAAE,EAC1C,UAAC,OAAuB;YACtB,OAAO,IAAI,uBAAa,CAAC,KAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;QAC9D,CAAC,CACF,CAAC;IACJ,CAAC;IAWO,6BAAS,GAAjB;;QACE,IAAI,CAAC,MAAM,GAAG,iBAAO,CAAC;YACpB,MAAM,EAAE;gBACN,KAAK,EAAE,MAAA,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,mCAAI,OAAO;aAC9C;SACF,CAAC,CAAC;IACL,CAAC;IAWO,+BAAW,GAAnB;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,kBAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IAWO,+BAAW,GAAnB;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,kBAAQ,CAC1B,IAAI,CAAC,MAAM,CAAC,QAAQ,EACpB,IAAI,gBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAC1B,CAAC;IACJ,CAAC;IAWO,6BAAS,GAAjB;QACE,IAAM,KAAK,GAAG,IAAI,eAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvC,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE9C,IAAI,CAAC,aAAa,GAAG,IAAI,uBAAa,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAE9D,IAAI,CAAC,MAAM,CAAC,OAAO,CACjB,YAAY,EACZ,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CACzD,CAAC;IACJ,CAAC;IACH,gBAAC;AAAD,CAAC,AAlQD,IAkQC","sourcesContent":["import fastify, { FastifyInstance, FastifyReply, FastifyRequest } from \"fastify\";\nimport { TransactionReceipt } from \"@ethersproject/abstract-provider\";\n\nimport Configuration from \"./config/Configuration\";\nimport Provider from \"./provider/Provider\";\nimport Wallet from \"./wallet/Wallet\";\n\nimport Database from \"./db/Database\";\nimport Whitelist, { ListItem } from \"./db/Whitelist\";\nimport Admin from \"./db/Admin\";\nimport Authenticator from \"./auth/Authenticator\";\n\nimport ExecuteTransaction from \"./transactions/execute/ExecuteTransaction\";\nimport ChallengeTransaction from \"./transactions/challenge/ChallengeTransaction\";\nimport ScheduleTransaction from \"./transactions/schedule/ScheduleTransaction\";\nimport CreateTransaction from \"./transactions/create/CreateTransaction\";\n\nimport AddItemAction from \"./whitelist/AddItemAction\";\nimport DeleteItemAction from \"./whitelist/DeleteItemAction\";\nimport GetListAction from \"./whitelist/GetListAction\";\nimport AbstractTransaction from \"../lib/transactions/AbstractTransaction\";\nimport AbstractWhitelistAction from \"../lib/whitelist/AbstractWhitelistAction\";\n\nexport default class Bootstrap {\n  /**\n   * @property {FastifyInstance} server\n   *\n   * @private\n   */\n  private server: FastifyInstance;\n\n  /**\n   * @property {Authenticator} authenticator\n   *\n   * @private\n   */\n  private authenticator: Authenticator;\n\n  /**\n   * @property {Whitelist} whitelist\n   *\n   * @private\n   */\n  private whitelist: Whitelist;\n\n  /**\n   * @property {Provider} provider\n   *\n   * @private\n   */\n  private provider: Provider;\n\n  /**\n   * @property {Database} database\n   *\n   * @private\n   */\n  private database: Database;\n\n  /**\n   * @param {Configuration} config\n   *\n   * @constructor\n   */\n  constructor(private config: Configuration) {\n    this.setServer();\n    this.setDatabase();\n    this.setProvider();\n    this.registerTestRoute();\n  }\n\n  /**\n   * Starts the entire server\n   *\n   * @method run\n   *\n   * @returns {void}\n   *\n   * @public\n   */\n  public run(): void {\n    this.server.listen(\n      this.config.server.port,\n      this.config.server.host,\n      (error: Error, address: string): void => {\n        if (error) {\n          console.error(error);\n          process.exit(0);\n        }\n\n        console.log(`Server is listening at ${address}`);\n      }\n    );\n  }\n\n    /**\n   * Register test routes\n   *\n   * @method registerTestRoute\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private registerTestRoute() {\n    this.server.get(\n      \"/simple\",\n      (request: FastifyRequest, reply: FastifyReply) => {\n        console.log(\">>>>>>>sdfsdfsd\")\n        reply\n        .code(200)\n        .header('Content-Type', 'application/json; charset=utf-8')\n        .send({ hello: 'world' })\n      }\n    );\n  }\n\n  /**\n   * Register all transaction related routes\n   *\n   * @method registerTransactionRoutes\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private registerTransactionRoutes(): void {\n    this.server.post(\n      \"/execute\",\n      { schema: AbstractTransaction.schema },\n      (request: FastifyRequest): Promise<TransactionReceipt> => {\n        return new ExecuteTransaction(\n          this.config.ethereum,\n          this.provider,\n          this.whitelist,\n          request\n        ).execute();\n      }\n    );\n\n    this.server.post(\n      \"/schedule\",\n      { schema: AbstractTransaction.schema },\n      (request: FastifyRequest): Promise<TransactionReceipt> => {\n        return new ScheduleTransaction(\n          this.config.ethereum,\n          this.provider,\n          this.whitelist,\n          request\n        ).execute();\n      }\n    );\n\n    this.server.post(\n      \"/challenge\",\n      { schema: AbstractTransaction.schema },\n      (request: FastifyRequest): Promise<TransactionReceipt> => {\n        return new ChallengeTransaction(\n          this.config.ethereum,\n          this.provider,\n          this.whitelist,\n          request\n        ).execute();\n      }\n    );\n\n    this.server.post(\n      \"/create\",\n      { schema: AbstractTransaction.schema },\n      (request: FastifyRequest): Promise<TransactionReceipt> => {\n        return new CreateTransaction(\n          this.config.ethereum,\n          this.provider,\n          this.whitelist,\n          request\n        ).execute();\n      }\n    );\n  }\n\n  /**\n   * Register all whitelist related routes\n   *\n   * @method registerWhitelistRoutes\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private registerWhitelistRoutes(): void {\n    this.server.post(\n      \"/whitelist\",\n      { schema: AbstractWhitelistAction.schema },\n      (request: FastifyRequest): Promise<ListItem> => {\n        return new AddItemAction(this.whitelist, request).execute();\n      }\n    );\n\n    this.server.delete(\n      \"/whitelist\",\n      { schema: AbstractWhitelistAction.schema },\n      (request: FastifyRequest): Promise<boolean> => {\n        return new DeleteItemAction(this.whitelist, request).execute();\n      }\n    );\n\n    this.server.get(\n      \"/whitelist\",\n      { schema: AbstractWhitelistAction.schema },\n      (request: FastifyRequest): Promise<ListItem[]> => {\n        return new GetListAction(this.whitelist, request).execute();\n      }\n    );\n  }\n\n  /**\n   * Initiates the server instance\n   *\n   * @method setServer\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private setServer(): void {\n    this.server = fastify({\n      logger: {\n        level: this.config.server.logLevel ?? \"debug\",\n      },\n    });\n  }\n\n  /**\n   * Initiates the database instance\n   *\n   * @method setProvider\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private setDatabase(): void {\n    this.database = new Database(this.config.database);\n  }\n\n  /**\n   * Initiates the provider instance\n   *\n   * @method setProvider\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private setProvider(): void {\n    this.provider = new Provider(\n      this.config.ethereum,\n      new Wallet(this.database)\n    );\n  }\n\n  /**\n   * Registers the authentication handler\n   *\n   * @method setupAuth\n   *\n   * @returns {void}\n   *\n   * @private\n   */\n  private setupAuth(): void {\n    const admin = new Admin(this.database);\n    this.whitelist = new Whitelist(this.database);\n\n    this.authenticator = new Authenticator(this.whitelist, admin);\n\n    this.server.addHook(\n      \"preHandler\",\n      this.authenticator.authenticate.bind(this.authenticator)\n    );\n  }\n}\n"]}