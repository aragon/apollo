{"version":3,"file":"Admin.js","sourceRoot":"","sources":["../../../src/db/Admin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;IAMI,eAAoB,EAAY;QAAZ,OAAE,GAAF,EAAE,CAAU;IAAG,CAAC;IAWvB,uBAAO,GAApB,UAAqB,SAAiB;;;;4BAC1B,WAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAc,2CAAyC,SAAS,MAAG,CAAC,EAAA;4BAA/F,WAAO,CAAC,SAAuF,CAAC,CAAC,MAAM,GAAG,CAAC,EAAA;;;;KAC9G;IAaM,wBAAQ,GAAf,UAAgB,SAAiB;QAC7B,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAY,iCAA+B,SAAS,OAAI,CAAC,CAAA;IACjF,CAAC;IAaY,2BAAW,GAAxB,UAAyB,SAAiB;;;;4BAC9B,WAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAc,yCAAuC,SAAS,MAAG,CAAC,EAAA;4BAA7F,WAAO,CAAC,SAAqF,CAAC,CAAC,MAAM,GAAG,CAAC,EAAA;;;;KAC5G;IAWM,yBAAS,GAAhB;QACI,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAc,sBAAsB,CAAC,CAAA;IAC7D,CAAC;IACL,YAAC;AAAD,CAAC,AA/DD,IA+DC","sourcesContent":["import Database from './Database'\n\nexport interface AdminItem {\n    PublicKey: string\n    PrivateKey: string\n}\n\nexport default class Admin {\n    /**\n     * @param {Database} db - The Database adapter\n     * \n     * @constructor \n     */\n    constructor(private db: Database) {}\n\n    /**\n     * Checks if a given publicKey does have admin rights\n     * \n     * @method isAdmin\n     * \n     * @param {string} publicKey\n     * \n     * @returns {boolean} \n     */\n    public async isAdmin(publicKey: string): Promise<boolean> {\n        return (await this.db.query<AdminItem[]>(`SELECT * FROM admins WHERE PublicKey='${publicKey}'`)).length > 0\n    }\n\n    /**\n     * Adds a admin record\n     * \n     * @method addAdmin\n     * \n     * @param {string} publicKey \n     * \n     * @returns {AdminItem}\n     * \n     * @public\n     */\n    public addAdmin(publicKey: string): Promise<AdminItem> {\n        return this.db.query<AdminItem>(`INSERT INTO admins VALUES ('${publicKey}')`)\n    }\n\n    /**\n     * Deletes a admin record\n     * \n     * @method deleteAdmin\n     * \n     * @param {string} publicKey\n     * \n     * @returns {boolean}\n     * \n     * @public \n     */\n    public async deleteAdmin(publicKey: string): Promise<boolean> {\n        return (await this.db.query<AdminItem[]>(`DELETE FROM admins WHERE PublicKey='${publicKey}'`)).length > 0\n    }\n\n    /**\n     * Returns all admin records\n     * \n     * @method getAdmins\n     * \n     * @returns {AdminItem[]}\n     * \n     * @public\n     */\n    public getAdmins(): Promise<AdminItem[]> {\n        return this.db.query<AdminItem[]>('SELECT * from admins')\n    }\n}\n"]}