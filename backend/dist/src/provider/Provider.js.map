{"version":3,"file":"Provider.js","sourceRoot":"","sources":["../../../src/provider/Provider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sDAA8E;AAO9E;IAgBI,kBAAoB,MAAuB,EAAU,MAAc;QAA/C,WAAM,GAAN,MAAM,CAAiB;QAAU,WAAM,GAAN,MAAM,CAAQ;QAC/D,IAAI,CAAC,QAAQ,GAAG,IAAI,2BAAe,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IACxD,CAAC;IAYY,kCAAe,GAA5B,UAA6B,QAAgB,EAAE,gBAAkC;;;;;;wBAEnE,KAAA,CAAA,KAAA,IAAI,CAAC,QAAQ,CAAA,CAAC,eAAe,CAAA;wBACzB,KAAA,CAAA,KAAA,IAAI,CAAC,MAAM,CAAA,CAAC,IAAI,CAAA;wBAClB,WAAM,IAAI,CAAC,qBAAqB,CAC5B,QAAQ,EACR,gBAAgB,CACnB,EAAA;4BAJL,WAAM,cACF,SAGC,EACD,IAAI,CAAC,MAAM,CAAC,SAAS,EACxB,EAAA;4BAPL,WAAM,cACF,SAMC,EACJ,EAAA;4BATL,WAAO,CACH,SAQC,CACJ,CAAC,IAAI,CACF,IAAI,CAAC,MAAM,CAAC,kBAAkB,CACjC,EAAA;;;;KACJ;IAYa,wCAAqB,GAAnC,UAAoC,QAAgB,EAAE,gBAAkC;;;;;;wBAC9E,SAAS,GAAuB;4BAClC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC;4BACnC,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE;yBAClC,CAAA;wBAED,KAAA,SAAS,CAAA;wBAAY,WAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,EAAA;;wBAA/D,GAAU,QAAQ,GAAG,SAA0C,CAAA;wBAE/D,WAAO,SAAS,EAAA;;;;KACnB;IACL,eAAC;AAAD,CAAC,AAlED,IAkEC","sourcesContent":["import { JsonRpcProvider, TransactionRequest } from '@ethersproject/providers'\nimport { TransactionReceipt } from '@ethersproject/abstract-provider'\nimport Wallet from '../wallet/Wallet'\nimport { EthereumOptions } from '../config/Configuration';\nimport ContractFunction from '../../lib/transactions/ContractFunction'\n\n// TODO: Check populating of TX options\nexport default class Provider {\n    /**\n     * The base provider of ethers.js\n     * \n     * @property {BaseProvider} provider\n     * \n     * @private\n     */\n    private provider: JsonRpcProvider\n\n    /**\n     * @param {EthereumOptions} config \n     * @param {Wallet} wallet \n     * \n     * @constructor\n     */\n    constructor(private config: EthereumOptions, private wallet: Wallet) {\n        this.provider = new JsonRpcProvider(this.config.url)\n    }\n\n    /**\n     * Sends the transaction and returns the receipt after the configured block confirmations are reached\n     * \n     * @method sendTransaction\n     * \n     * @param {string} contract \n     * @param {ContractFunction} contractFunction \n     * \n     * @returns {Promise<TransactionReceipt>}\n     */\n    public async sendTransaction(contract: string, contractFunction: ContractFunction): Promise<TransactionReceipt> {\n        return (\n            await this.provider.sendTransaction(\n                await this.wallet.sign(\n                    await this.getTransactionOptions(\n                        contract,\n                        contractFunction\n                    ),\n                    this.config.publicKey\n                )\n            )\n        ).wait(\n            this.config.blockConfirmations\n        )\n    }\n\n    /**\n     * Returns the transaction options\n     * \n     * @method getTransactionOptions\n     * \n     * @param {string} contract - The name of the contract \n     * @param {ContractFunction} contractFunction - The ContractFunction object \n     * \n     * @returns {Promise<TransactionRequest>} \n     */\n    private async getTransactionOptions(contract: string, contractFunction: ContractFunction): Promise<TransactionRequest> {\n        const txOptions: TransactionRequest = {\n            to: this.config.contracts[contract],\n            data: contractFunction.encode()\n        }\n\n        txOptions.gasLimit = await this.provider.estimateGas(txOptions)\n\n        return txOptions\n    }\n}\n"]}