{"version":3,"file":"Configuration.js","sourceRoot":"","sources":["../../../src/config/Configuration.ts"],"names":[],"mappings":";;AAgCA;IAiCI,uBACI,MAAc;QAEd,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAA;QAC/B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAA;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAA;IAC/B,CAAC;IAWD,sBAAW,mCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aAWD,UAAoB,KAAsB;YACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC;;;OAbA;IAwBD,sBAAW,mCAAQ;aAAnB;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;aAWD,UAAoB,KAAsB;YACtC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QAC3B,CAAC;;;OAbA;IAwBD,sBAAW,iCAAM;aAAjB;YACI,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;aAWD,UAAkB,KAAoB;YAClC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC;;;OAbA;IAwBM,gCAAQ,GAAf;QACI,OAAO;YACH,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,QAAQ,EAAE,IAAI,CAAC,SAAS;YACxB,MAAM,EAAE,IAAI,CAAC,OAAO;SACvB,CAAA;IACL,CAAC;IACL,oBAAC;AAAD,CAAC,AAvID,IAuIC","sourcesContent":["/* istanbul ignore file */\n// Ignore added because VOs doesn't have to be tested especially if they do not have any logic\n\nexport interface EthereumOptions {\n    url: string\n    blockConfirmations: number\n    publicKey: string\n    contracts: {\n        [name: string]: string\n    }\n}\n\nexport interface DatabaseOptions {\n    user: string,\n    host: string,\n    password: string,\n    database: string,\n    port: number\n}\n\nexport interface ServerOptions {\n    host: string,\n    port: number,\n    logLevel?: string\n}\n\nexport interface Config {\n    ethereum: EthereumOptions,\n    database: DatabaseOptions,\n    server: ServerOptions\n}\n\nexport default class Configuration {\n    /**\n     * The options to connect to a Ethereum node and how TXs should be handled \n     * \n     * @property {EthereumOptions} _ethereum\n     * \n     * @private\n     */\n    private _ethereum: EthereumOptions\n\n    /**\n     * The options to connect to the Postgres database\n     * \n     * @property {DatabaseOptions} _database\n     * \n     * @private\n     */\n    private _database: DatabaseOptions\n\n    /**\n     * The options to configure fastify server\n     * \n     * @property {ServerOptions} _server\n     * \n     * @private\n     */\n    private _server: ServerOptions\n\n    /**\n     * @param {Config} config - The wrapper object for all configuration properties \n     * \n     * @constructor\n     */\n    constructor(\n        config: Config\n    ) {\n        this.ethereum = config.ethereum\n        this.database = config.database\n        this.server = config.server\n    }\n\n    /**\n     * Getter for the database options. \n     * \n     * @property database\n     * \n     * @returns {DatabaseOptions}\n     * \n     * @public\n     */\n    public get database(): DatabaseOptions {\n        return this._database;\n    }\n\n    /**\n     * Setter for the database options. \n     * \n     * @property database\n     * \n     * @returns {void}\n     * \n     * @public\n     */\n    public set database(value: DatabaseOptions) {\n        this._database = value;\n    }\n\n    /**\n     * Getter for ethereum node options\n     * \n     * @property ethereum\n     * \n     * @returns {EthereumOptions}\n     * \n     * @public \n     */\n    public get ethereum(): EthereumOptions {\n        return this._ethereum;\n    }\n\n    /**\n     * Setter for the ethereum node options\n     * \n     * @property ethereum\n     * \n     * @returns {EthereumOptions}\n     * \n     * @public\n     */\n    public set ethereum(value: EthereumOptions) {\n        this._ethereum = value;\n    }\n\n    /**\n     * Getter for the server options\n     * \n     * @property server\n     * \n     * @returns {ServerOptions}\n     * \n     * @public\n     */\n    public get server(): ServerOptions {\n        return this._server;\n    }\n\n    /**\n     * Setter for the server options\n     * \n     * @property server\n     * \n     * @returns {void}\n     * \n     * @public\n     */\n    public set server(value: ServerOptions) {\n        this._server = value;\n    }\n\n    /**\n     * Returns the internal options object as new object\n     * \n     * @method toObject\n     * \n     * @returns {object}\n     * \n     * @public\n     */\n    public toObject(): any {\n        return {\n            ethereum: this._ethereum,\n            database: this._database,\n            server: this._server\n        }\n    }\n}\n"]}