{"version":3,"file":"Wallet.js","sourceRoot":"","sources":["../../../src/wallet/Wallet.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAA4D;AAS5D;IAwBI,gBAAoB,EAAY;QAAZ,OAAE,GAAF,EAAE,CAAU;IAAI,CAAC;IAcxB,qBAAI,GAAjB,UAAkB,SAA6B,EAAE,SAAiB;;;;4BAC9D,WAAM,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAA;;wBAAhC,SAAgC,CAAA;wBAEhC,SAAS,CAAC,IAAI,GAAG,SAAS,CAAA;wBAE1B,WAAO,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,EAAA;;;;KAChD;IAaa,2BAAU,GAAxB,UAAyB,SAAiB;;;;;;6BAClC,CAAA,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAA,EAA5C,cAA4C;wBAChC,WAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAW,oDAAkD,SAAS,MAAG,CAAC,EAAA;;wBAAnG,EAAE,GAAG,CAAC,SAA6F,CAAC,CAAC,CAAC,CAAC;wBAC7G,IAAI,CAAC,MAAM,GAAG,IAAI,eAAY,CAAC,EAAE,CAAC,CAAA;wBAClC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;;;;;KAElC;IACL,aAAC;AAAD,CAAC,AAhED,IAgEC","sourcesContent":["import {Wallet as EthersWallet} from '@ethersproject/wallet'\nimport { TransactionRequest } from '@ethersproject/providers'\nimport Database from '../db/Database'\n\nexport interface WalletItem {\n    PrivateKey: string\n    PublicKey: string\n}\n\nexport default class Wallet {\n    /**\n     * The used wallet object to sign a transaction \n     * \n     * @property {EthersWallet} wallet\n     * \n     * @private\n     */\n    private wallet: EthersWallet\n\n    /**\n     * The public key of the loaded wallet account\n     * \n     * @property {string} publicKey\n     * \n     * @private\n     */\n    private publicKey: string;\n\n    /**\n     * @param {Database} db - Database adapter\n     * \n     * @constructor\n     */\n    constructor(private db: Database) { }\n\n     /**\n      * Signs the given contract function with the Aragon privateKey\n      * \n      * @method sign\n      * \n      * @param {TransactionRequest} txOptions \n      * @param {string} publicKey\n      * \n      * @returns {Promise<string>}\n      * \n      * @public\n      */\n    public async sign(txOptions: TransactionRequest, publicKey: string): Promise<string> {\n        await this.loadWallet(publicKey)\n\n        txOptions.from = publicKey\n\n        return this.wallet.signTransaction(txOptions)\n    }\n\n    /**\n     * Returns the ethers wallet instance prepopulated with the Aragon privateKey\n     * \n     * @method loadWallet\n     * \n     * @param {string} publicKey\n     * \n     * @returns {EthersWallet}\n     * \n     * @private\n     */\n    private async loadWallet(publicKey: string): Promise<void> {\n        if (!this.wallet || this.publicKey !== publicKey) {\n            const pk = (await this.db.query<string[]>(`SELECT PrivateKey FROM wallet WHERE PublicKey='${publicKey}'`))[0];\n            this.wallet = new EthersWallet(pk)\n            this.publicKey = publicKey;\n        }\n    }\n}\n"]}