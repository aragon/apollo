{"version":3,"file":"AbstractTransaction.js","sourceRoot":"","sources":["../../../lib/transactions/AbstractTransaction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,oDAA8C;AAC9C,qEAA+D;AAO/D;IAA0D,uCAAkC;IA4BxF,6BACY,MAAuB,EACvB,QAAkB,EAClB,SAAoB,EAC5B,OAAuB;QAJ3B,YAMI,kBAAM,OAAO,CAAC,SACjB;QANW,YAAM,GAAN,MAAM,CAAiB;QACvB,cAAQ,GAAR,QAAQ,CAAU;QAClB,eAAS,GAAT,SAAS,CAAW;;IAIhC,CAAC;IAWY,qCAAO,GAApB;;;;;;wBACU,gBAAgB,GAAG,IAAI,0BAAgB,CACzC,IAAI,CAAC,WAAW,EACf,IAAI,CAAC,OAAO,CAAC,MAAiB,CAAC,OAAO,CAC1C,CAAA;wBACD,gBAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAA;wBAE7C,WAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAA;;wBAAlG,OAAO,GAAuB,SAAoE;wBAEtG,IAAG,CAAE,IAAI,CAAC,OAAgC,CAAC,KAAK,EAAE;4BAC9C,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAE,IAAI,CAAC,OAAgC,CAAC,SAAS,CAAC,CAAA;yBAC5F;wBAED,WAAO,OAAO,EAAC;;;;KAClB;IAWD,sBAAkB,6BAAM;aAAxB;YACI,IAAM,MAAM,GAAG,wBAAc,CAAC,MAAM,CAAA;YAEpC,MAAM,CAAC,QAAQ,GAAG;gBACd,GAAG,EAAE;oBACD,IAAI,EAAE,QAAQ;oBACd,UAAU,EAAE;wBACR,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACtB,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACxB,eAAe,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACnC,gBAAgB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACpC,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC3B,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC7B,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBAC7B,eAAe,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACnC,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;wBACvB,aAAa,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;wBACjC,iBAAiB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAC;wBACpC,SAAS,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE;wBAC9B,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;qBAC7B;iBACJ;aACJ,CAAA;YAED,OAAO,MAAM,CAAA;QACjB,CAAC;;;OAAA;IACL,0BAAC;AAAD,CAAC,AAjGD,CAA0D,wBAAc,GAiGvE","sourcesContent":["import { FastifySchema, FastifyRequest } from 'fastify';\nimport { TransactionReceipt } from '@ethersproject/abstract-provider'\nimport { JsonFragment } from '@ethersproject/abi';\nimport AbstractAction from '../AbstractAction'\nimport ContractFunction from '../transactions/ContractFunction'\nimport Provider from '../../src/provider/Provider'\nimport { EthereumOptions } from '../../src/config/Configuration';\nimport Whitelist from '../../src/db/Whitelist';\nimport { Params } from '../AbstractAction';\nimport { AuthenticatedRequest } from '../../src/auth/Authenticator';\n\nexport default abstract class AbstractTransaction extends AbstractAction<TransactionReceipt> {\n    /**\n     * The function ABI used to create a transaction\n     * \n     * @property {Object} functionABI\n     * \n     * @protected\n     */\n    protected functionABI: JsonFragment\n\n    /**\n     * The contract name\n     * \n     * @property {string} contract\n     * \n     * @protected\n     */\n    protected contract: string\n\n    /**\n     * @param {EthereumOptions} config - Ethereum related configurations\n     * @param {Provider} provider - The Ethereum provider object\n     * @param {Whitelist} whitelist - Whitelist DB adapter\n     * @param {Request} request - The request body given by the user\n     * @param {string} publicKey - The public key of the user\n     * \n     * @constructor\n     */\n    constructor(\n        private config: EthereumOptions,\n        private provider: Provider,\n        private whitelist: Whitelist,\n        request: FastifyRequest,\n    ) {\n        super(request)\n    }\n\n    /**\n     * Executes the transaction and returns the TransactionReceipt\n     * \n     * @method execute\n     * \n     * @returns {Promise<TransactionReceipt>} \n     * \n     * @public\n     */\n    public async execute(): Promise<TransactionReceipt> {\n        const contractFunction = new ContractFunction(\n            this.functionABI,\n            (this.request.params as Params).message\n        )\n        contractFunction.functionArguments[0].payload.submitter = this.config.publicKey\n\n        let receipt: TransactionReceipt = await this.provider.sendTransaction(this.contract, contractFunction)\n\n        if(!(this.request as AuthenticatedRequest).admin) {\n            this.whitelist.increaseExecutionCounter((this.request as AuthenticatedRequest).publicKey)\n        }\n\n        return receipt;\n    } \n\n    /**\n     * TODO: Test BigNumber handling of the response and the fastify schema validation\n     * \n     * Returns the schema of a transaction command\n     * \n     * @property {FastifySchema} schema\n     * \n     * @returns {FastifySchema}\n     */\n    public static get schema(): FastifySchema {\n        const schema = AbstractAction.schema\n\n        schema.response = {\n            200: {\n                type: 'object',\n                properties: {\n                    to: { type: 'string' },\n                    from: { type: 'string' },\n                    contractAddress: { type: 'string' },\n                    transactionIndex: { type: 'number' },\n                    gasUsed: { type: 'object' }, // BigNumber\n                    logsBloom: { type: 'string' },\n                    blockHash: { type: 'string' },\n                    transactionHash: { type: 'string' },\n                    logs: { type: 'array' },\n                    confirmations: { type: 'number' },\n                    cumulativeGasUsed: { type: 'object'}, // BigNumber\n                    byzantium: { type: 'boolean' },\n                    status: { type: 'number' }\n                }\n            }\n        }\n\n        return schema\n    }\n}\n"]}