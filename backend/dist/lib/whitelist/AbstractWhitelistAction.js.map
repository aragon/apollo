{"version":3,"file":"AbstractWhitelistAction.js","sourceRoot":"","sources":["../../../lib/whitelist/AbstractWhitelistAction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,oDAA0D;AAU1D;IAAiE,2CAAiB;IAO9E,iCAAsB,SAAoB,EAAE,OAAuB;QAAnE,YACI,kBAAM,OAAO,CAAC,SACjB;QAFqB,eAAS,GAAT,SAAS,CAAW;;IAE1C,CAAC;IAsBD,sBAAkB,iCAAM;aAAxB;YACI,OAAO,wBAAc,CAAC,MAAM,CAAA;QAChC,CAAC;;;OAAA;IACL,8BAAC;AAAD,CAAC,AAlCD,CAAiE,wBAAc,GAkC9E","sourcesContent":["import { FastifyRequest, FastifySchema } from 'fastify';\nimport AbstractAction, { Params } from '../AbstractAction'\nimport Whitelist, {ListItem} from '../../src/db/Whitelist'\n\nexport interface WhitelistParams extends Params {\n    message: {\n        publicKey: string,\n        txLimit?: number\n    }\n}\n\nexport default abstract class AbstractWhitelistAction<T> extends AbstractAction<T> {\n    /**\n     * @param {Whitelist} whitelist - The whitelist database entitiy\n     * @param {WhitelistRequest} request - The given request body by the user\n     * \n     * @constructor\n     */\n    constructor(protected whitelist: Whitelist, request: FastifyRequest) {\n        super(request)\n    }\n\n    /**\n     * Executes the actual action\n     * \n     * @method execute\n     * \n     * @returns {Promise<T>}\n     * \n     * @public\n     */\n    public abstract execute(): Promise<T>\n\n    /**\n     * TODO: Define response validation\n     * \n     * Returns the schema of a transaction command\n     * \n     * @property {FastifySchema} schema\n     * \n     * @returns {FastifySchema}\n     */\n    public static get schema(): FastifySchema {\n        return AbstractAction.schema\n    }\n}\n"]}